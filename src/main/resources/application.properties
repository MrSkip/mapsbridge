spring.application.name=mapsbridge
app.version=1.0.0

# Database configuration
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/mapsbridge}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:postgres}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:postgres}
spring.jpa.hibernate.ddl-auto=update
spring.jpa.open-in-view=false

# used in logback-spring-prod.xml
cloudwatch.logging.enable=true
cloudwatch.logging.log-group-name=mapsbridge-log-group
cloudwatch.logging.log-stream-name=mapsbridge-stream
cloudwatch.logging.region=${AWS_REGION:eu-central-1}
logging.level.io.micrometer.cloudwatch2=DEBUG
logging.level.software.amazon.awssdk.services.cloudwatch=DEBUG
logging.level.io.micrometer.core.instrument.push=DEBUG

# Logging configuration - specify which logback config to use
logging.config=classpath:logback-spring-${spring.profiles.active:dev}.xml

# Actuator configuration
management.endpoint.health.show-details=NEVER
management.metrics.export.cloudwatch.enabled=true
management.metrics.export.cloudwatch.namespace=mapsbridge
management.metrics.export.cloudwatch.region=${AWS_REGION:eu-central-1}
management.metrics.export.cloudwatch.step=PT1M
management.metrics.export.cloudwatch.batch-size=20
# Expose all necessary endpoints for metrics collection
management.endpoints.web.exposure.include=health,info,metrics,prometheus
# Enable JVM metrics
management.metrics.enable.jvm=true

# Map URL templates
maps.google.url=${MAPS_GOOGLE_URL:https://www.google.com/maps?q={lat},{lon}}
maps.apple.url=${MAPS_APPLE_URL:https://maps.apple.com/?q={lat},{lon}}
maps.bing.url=${MAPS_BING_URL:https://www.bing.com/maps?q={lat},{lon}}
maps.osm.url=${MAPS_OSM_URL:https://www.openstreetmap.org/?mlat={lat}&mlon={lon}#map=16/{lat}/{lon}}
maps.waze.url=${MAPS_WAZE_URL:https://waze.com/ul?ll={lat},{lon}&navigate=yes}
maps.komoot.url=${MAPS_KOMOOT_URL:https://www.komoot.com/plan/@{lat},{lon},9.000z?p[0]&p[1][loc]={lat},{lon}}

# Google API configuration
google.api.key=${GOOGLE_API_KEY:}
google.api.enabled=${GOOGLE_API_ENABLED:false}
# Radar.io API configuration
radar.api.key=${RADAR_API_KEY:}
radar.api.enabled=${RADAR_API_ENABLED:false}

# Swagger/OpenAPI configuration
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/api-docs

# Security configuration
api.security.token=${API_SECURITY_TOKEN:default-secure-token}

# Telegram Bot configuration
telegram.bot.enabled=${TELEGRAM_BOT_ENABLED:false}
telegram.bot.username=${TELEGRAM_BOT_USERNAME:your_bot_username}
telegram.bot.token=${TELEGRAM_BOT_TOKEN:your_bot_token}

# CORS configuration
cors.allowed-origins=${CORS_ALLOWED_ORIGINS:http://localhost:4200}
cors.allowed-methods=${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS}
cors.allowed-headers=${CORS_ALLOWED_HEADERS:*}
cors.allow-credentials=${CORS_ALLOW_CREDENTIALS:true}

# Mailtrap configuration
mailtrap.sender.email=${MAILTRAP_SENDER_EMAIL:no-reply@mapsbridge.com}
mailtrap.sender.name=${MAILTRAP_SENDER_NAME:Maps Bridge}
mailtrap.enabled=${MAILTRAP_ENABLED:false}
mailtrap.api.token=${MAILTRAP_API_TOKEN:}

# Email confirmation configuration
app.token.expiration-minutes=${APP_TOKEN_EXPIRATION_MINUTES:15}
app.confirmation.base-url=${APP_CONFIRMATION_BASE_URL:http://localhost:8080}
app.confirmation.base-url-suffix=${APP_CONFIRMATION_BASE_URL_SUFFIX:/auth/api/confirm?token=}
# Rate limiter configuration
# All rate limiter configurations are in a separate file
spring.config.import=classpath:application-ratelimiter.properties