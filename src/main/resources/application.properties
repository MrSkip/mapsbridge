spring.application.name=mapsbridge

# Database configuration
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/mapsbridge}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:postgres}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:postgres}
spring.jpa.hibernate.ddl-auto=update
spring.jpa.open-in-view=false

# Actuator configuration
management.endpoints.web.exposure.include=health
management.endpoint.health.show-details=NEVER

# Map URL templates
maps.google.url=${MAPS_GOOGLE_URL:https://www.google.com/maps?q={lat},{lon}}
maps.apple.url=${MAPS_APPLE_URL:https://maps.apple.com/?q={lat},{lon}}
maps.bing.url=${MAPS_BING_URL:https://www.bing.com/maps?q={lat},{lon}}
maps.osm.url=${MAPS_OSM_URL:https://www.openstreetmap.org/?mlat={lat}&mlon={lon}#map=16/{lat}/{lon}}
maps.waze.url=${MAPS_WAZE_URL:https://waze.com/ul?ll={lat},{lon}&navigate=yes}
maps.komoot.url=${MAPS_KOMOOT_URL:https://www.komoot.com/plan/@{lat},{lon},9.000z?p[0]&p[1][loc]={lat},{lon}}

# Google API configuration
google.api.key=${GOOGLE_API_KEY:}
google.api.enabled=${GOOGLE_API_ENABLED:false}

# Swagger/OpenAPI configuration
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/api-docs

# Security configuration
api.security.token=${API_SECURITY_TOKEN:default-secure-token}

# Telegram Bot configuration
telegram.bot.enabled=${TELEGRAM_BOT_ENABLED:false}
telegram.bot.username=${TELEGRAM_BOT_USERNAME:your_bot_username}
telegram.bot.token=${TELEGRAM_BOT_TOKEN:your_bot_token}

# CORS configuration
cors.allowed-origins=${CORS_ALLOWED_ORIGINS:http://localhost:4200}
cors.allowed-methods=${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS}
cors.allowed-headers=${CORS_ALLOWED_HEADERS:*}
cors.allow-credentials=${CORS_ALLOW_CREDENTIALS:true}

# Mailtrap configuration
mailtrap.sender.email=${MAILTRAP_SENDER_EMAIL:no-reply@mapsbridge.com}
mailtrap.sender.name=${MAILTRAP_SENDER_NAME:Maps Bridge}
mailtrap.enabled=${MAILTRAP_ENABLED:false}
mailtrap.api.token=${MAILTRAP_API_TOKEN:}

# Email confirmation configuration
app.token.expiration-minutes=${APP_TOKEN_EXPIRATION_MINUTES:15}
app.confirmation.base-url=${APP_CONFIRMATION_BASE_URL:http://localhost:8080}
app.confirmation.base-url-suffix=${APP_CONFIRMATION_BASE_URL_SUFFIX:/auth/api/confirm?token=}

# Resilience4j configuration
resilience4j.ratelimiter.metrics.enabled=true

# Define configurations (templates) that can be reused
resilience4j.ratelimiter.configs.default.register-health-indicator=true
resilience4j.ratelimiter.configs.default.timeout-duration=PT0S

resilience4j.ratelimiter.configs.ipConfig.register-health-indicator=true
resilience4j.ratelimiter.configs.ipConfig.limit-for-period=${APP_RATE_LIMIT_MAX_REQUESTS_PER_IP:10}
resilience4j.ratelimiter.configs.ipConfig.limit-refresh-period=PT${APP_RATE_LIMIT_WINDOW_MINUTES:60}M
resilience4j.ratelimiter.configs.ipConfig.timeout-duration=PT0S

resilience4j.ratelimiter.configs.emailConfig.register-health-indicator=true
resilience4j.ratelimiter.configs.emailConfig.limit-for-period=${APP_RATE_LIMIT_MAX_REQUESTS_PER_EMAIL:3}
resilience4j.ratelimiter.configs.emailConfig.limit-refresh-period=PT${APP_RATE_LIMIT_WINDOW_MINUTES:60}M
resilience4j.ratelimiter.configs.emailConfig.timeout-duration=PT0S

# Define instances (these are predefined rate limiters if you want to use them directly)
resilience4j.ratelimiter.instances.ipRateLimiter.base-config=ipConfig
resilience4j.ratelimiter.instances.emailRateLimiter.base-config=emailConfig

# Rate limiter cleanup configuration
app.rate-limiter.cleanup.max-idle-hours=${APP_RATE_LIMITER_CLEANUP_MAX_IDLE_HOURS:24}
