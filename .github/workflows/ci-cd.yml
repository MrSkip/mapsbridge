name: CI/CD to AWS EC2

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Java JDK 21
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      # Step 3: Cache Gradle dependencies
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Step 4: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver: docker-container

      # Step 5: Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-

      # Step 6: Build the Gradle project
      - name: Build Gradle project
        run: |
          chmod +x ./gradlew
          ./gradlew build -x test

      # Step 7: Build the Docker image
      - name: Build Docker image
        run: |
          docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from=type=gha --cache-to=type=gha,mode=max -t mapsbridge:latest .

      # Step 8: Save Docker image as a file archive
      - name: Save Docker image as archive
        run: |
          docker save mapsbridge:latest -o mapsbridge.tar

      # Step 9: Upload Docker image archive as an artifact
      - name: Upload Docker image as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: mapsbridge
          path: mapsbridge.tar
          retention-days: 1

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # Step 1: Download the Docker image archive from the build job
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: mapsbridge

      # Step 2: Copy the Docker image archive to the EC2 instance
      - name: Copy Docker image to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "mapsbridge.tar"
          target: "/home/${{ secrets.EC2_USER }}"

      # Step 3: Connect to EC2 and deploy the application
      - name: Connect to EC2 and Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "Start deploying the application..."
            if [ -f "/home/${{ secrets.EC2_USER }}/mapsbridge.tar" ]; then
              docker load -i /home/${{ secrets.EC2_USER }}/mapsbridge.tar
            else
              echo "Docker image archive not found. Exiting."
              exit 1
            fi
            docker stop mapsbridge-container || true
            docker rm mapsbridge-container || true

            echo "Running the new Docker container..."
            docker run -d --name mapsbridge-container -p 8080:8080 \
              -e TELEGRAM_BOT_TOKEN="${{ secrets.TELEGRAM_BOT_TOKEN }}" \
              -e TELEGRAM_BOT_USERNAME="${{ secrets.TELEGRAM_BOT_USERNAME }}" \
              -e GOOGLE_API_KEY="${{ secrets.GOOGLE_API_KEY }}" \
              -e GOOGLE_API_ENABLED=true \
              -e SPRING_PROFILES_ACTIVE="prod" \
              mapsbridge:latest

            echo "Deployment finished successfully!"
